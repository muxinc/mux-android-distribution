/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.mux.gradle.android.publication

import com.android.build.api.dsl.LibraryExtension
import com.android.build.api.variant.AndroidComponentsExtension
import com.android.build.api.variant.LibraryVariant
import com.android.build.api.variant.LibraryVariantBuilder
import com.android.build.api.variant.VariantSelector
import com.android.builder.model.AndroidLibrary
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.publish.Publication
import org.gradle.api.publish.PublishingExtension
import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.publish.maven.plugins.MavenPublishPlugin

/**
 * A simple 'hello world' plugin.
 */
class AndroidPublicationPlugin : Plugin<Project> {

  private lateinit var extension: AndroidPublicationPluginExtension
  private lateinit var project: Project

  private val publishableVariants = mutableListOf<String>()

  override fun apply(project: Project) {
    this.project = project
    initExtension(project)

    if (!projectIsAndroidLibrary()) {
      project.logger.warn("muxLibrary:" +
              " Skipping project ${project.name} because the library plugin is not applied")
      return
    }

    project.plugins.apply(MavenPublishPlugin::class.java)

    // While we're in the configuration phase
    // todo - version
    val prodBuild = extension.publishToProdFn?.invoke() ?: false
    if (prodBuild) {
      project.version = extension.releaseVersionFn?.invoke() ?: ""
    } else {
      project.version = extension.devVersionFn?.invoke() ?: ""
    }
    project.logger.info("muxLibrary: Building with version: ${project.version}")

    // Later steps
    @Suppress("UNCHECKED_CAST")
    processVariants(
      project.extensions.findByType(AndroidComponentsExtension::class.java)!!
            as AndroidComponentsExtension<LibraryExtension, LibraryVariantBuilder, LibraryVariant>
    )
    @Suppress("UNCHECKED_CAST")
    declarePublications(
      project.extensions.findByType(AndroidComponentsExtension::class.java)!!
              as AndroidComponentsExtension<LibraryExtension, LibraryVariantBuilder, LibraryVariant>
    )
  }

  private fun declarePublications(
    androidComponents: AndroidComponentsExtension<
            LibraryExtension,
            LibraryVariantBuilder,
            LibraryVariant
            >
  ) {
    project.afterEvaluate {
      // todo - in the original we iterated over the (difficult-to-reach) library variants.
      //  this time we're trying onVariants
    }

    // todo - is this soon enough? It's after finalizeDsl which should be all we need
    // we don't need to filter variants here, just don't create publications for all variants
    androidComponents.onVariants { variant ->
      // todo - if it's not soon enough, do an afterEvaluate here
      if(extension.publishVariantIfFn?.invoke(variant.name) == true) {
        project.extensions.findByType(PublishingExtension::class.java)!!.publications.create(
          variant.name, MavenPublication::class.java
        ) { pub ->
          val artifactId = extension.artifactIdFn?.invoke(variant) ?: variant.name
          val groupId = extension.groupIdFn?.invoke(variant) ?: ""

          pub.from(project.components.findByName(variant.name))
          pub.artifactId = artifactId
          pub.groupId = groupId
          @Suppress("UNNECESSARY_SAFE_CALL")
          pub.version = project.version?.toString() ?: "null"

          if (extension.pomFn != null) {
            pub.pom { extension.pomFn?.invoke(it) }
          }
          project.logger.info("muxLibrary: Created Publication with name${pub.name}")
          project.logger.info("muxLibrary: Created Publication with version ${pub.version}")
          project.logger.info("muxLibrary: Dumping publication $pub")
        }
      }
    }
  }

  private fun processVariants(androidComponents: AndroidComponentsExtension<LibraryExtension, LibraryVariantBuilder, LibraryVariant>) {
    // TODO - Implement Variant Filtering (for publishIf)
    // we do this in finalizeDsl instead of onVariants because it's too late to declare publication variants for our
    //   component by then (but we need to do a little more work because of this)
    androidComponents.finalizeDsl { ext ->
      val flavorContainer = FlavorDimensionContainer()
      val productFlavors = ext.productFlavors
      val buildTypes = ext.buildTypes

      if (!productFlavors.isEmpty()) {
        productFlavors.onEach { flavorContainer.addFlavor(it.dimension?: "", it.name) }
        val variantNames = variantNames(flavorContainer.asMap().values.toList(), buildTypes)
        if (extension.publishVariantIfFn == null) {
          project.logger.warn("muxLibrary")
        }
        variantNames
          .filter { extension.publishVariantIfFn?.invoke(it) ?: false }
          .onEach { variantName ->
            ext.publishing {
              singleVariant(variantName) {
                if (shouldPackageSources()) {
                  withSourcesJar()
                }
              }
            }
          }
          .also { this.publishableVariants.addAll(it) }
      } else {
        // no flavors, so we can just declare pub variants for each build type
        buildTypes.forEach {  buildType ->
          ext.publishing {
            singleVariant(buildType.name) {
              if (shouldPackageSources()) {
                withSourcesJar()
              }
            }
          }
        }
      }
    }
  }

  private fun shouldPackageSources(): Boolean {
    return extension.getPackageSources().isPresent && extension.getPackageSources().get()
  }

  @Throws
  private fun projectIsAndroidLibrary(): Boolean {
    return project.plugins.hasPlugin("com.android.library")
  }
  private fun initExtension(project: Project) {
    this.extension = project.extensions.create("muxLibrary", AndroidPublicationPluginExtension::class.java)
    extension.plugin = this
    extension.project = project
  }
}
