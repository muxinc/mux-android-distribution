/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.mux.gradle.android.publication

import com.android.build.api.dsl.LibraryExtension
import com.android.build.api.variant.AndroidComponentsExtension
import com.android.build.api.variant.LibraryVariant
import com.android.build.api.variant.LibraryVariantBuilder
import com.android.build.api.variant.VariantSelector
import com.android.build.gradle.internal.api.BaseVariantImpl
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.publish.Publication
import org.gradle.api.publish.maven.plugins.MavenPublishPlugin

/**
 * A simple 'hello world' plugin.
 */
class AndroidPublicationPlugin : Plugin<Project> {

  private lateinit var extension: AndroidPublicationPluginExtension
  private lateinit var project: Project

  private val createdPublications: List<Publication> = listOf()

  override fun apply(project: Project) {
    this.project = project
    initExtension(project)

    if (!projectIsAndroidLibrary()) {
      project.logger.warn("AndroidPublicationPlugin:" +
              " Skipping project ${project.name} because the library plugin is not applied")
      return
    }

    project.plugins.apply(MavenPublishPlugin::class.java)

    // While we're in the configuration phase
    // todo - version
    val prodBuild = extension.publishToProdFn?.invoke() ?: false
    if (prodBuild) {
      project.version = extension.releaseVersionFn?.invoke() ?: ""
    }

    // Later steps
    @Suppress("UNCHECKED_CAST")
    processVariants(
      project.extensions.findByType(AndroidComponentsExtension::class.java)!!
            as AndroidComponentsExtension<LibraryExtension, LibraryVariantBuilder, LibraryVariant>
    )
  }

  // todo - processVariants
  // todo - declarePublications

  private fun processVariants(androidComponents: AndroidComponentsExtension<LibraryExtension, LibraryVariantBuilder, LibraryVariant>) {
    // TODO - Implement Variant Filtering (for publishIf)
    // we do this in finalizeDsl instead of onVariants because it's too late to declare publication variants for our
    //   component by then (but we need to do a little more work because of this)
    androidComponents.finalizeDsl { ext ->
      val flavorContainer = FlavorDimensionContainer()
      val productFlavors = ext.productFlavors
      val buildTypes = ext.buildTypes

      if (!productFlavors.isEmpty()) {
        productFlavors.onEach { flavorContainer.addFlavor(it.dimension?: "", it.name) }
      } else {
        // no flavors, so we can just declare pub variants for each build type
        buildTypes.forEach {  buildType ->
          ext.publishing {
            singleVariant(buildType.name) {
              if (shouldPackageSources()) {
                withSourcesJar()
              }
            }
          }
        }
      }
    }
  }

  private fun shouldPackageSources(): Boolean {
    return extension.getPackageSources().isPresent && extension.getPackageSources().get()
  }

  @Throws
  private fun projectIsAndroidLibrary(): Boolean {
    return project.plugins.hasPlugin("com.android.library")
  }
  private fun initExtension(project: Project) {
    this.extension = project.extensions.create("muxLibrary", AndroidPublicationPluginExtension::class.java)
    extension.plugin = this
    extension.project = project
  }
}
