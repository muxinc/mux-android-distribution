/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package mux.artifactory

import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.internal.artifacts.ArtifactPublicationServices
import org.jfrog.gradle.plugin.artifactory.ArtifactoryPlugin
import org.jfrog.gradle.plugin.artifactory.dsl.ArtifactoryPluginConvention

/**
 * A plugin that handles authentication and config for artifactory
 * To authenticate, prefer using `local.properties`. The following keys are required:
 * * `artifactory_username`
 * * `artifactory_password`
 *
 * You can also put then in your environment variables, prefixed with `ORG_GRADLE_PROJECT`.
 * For debugging purposes they can also be defined literally by the DSL
 */
class MuxArtifactoryPlugin: Plugin<Project> {

    private lateinit var extension: MuxArtifactoryPluginExtension
    private lateinit var project: Project

    internal var publishToProd: (() -> Boolean)? = null

    override fun apply(project: Project) {
      this.project = project
      this.extension = project.extensions.create("muxArtifactory", MuxArtifactoryPluginExtension::class.java)
      this.extension.plugin = this
      this.extension.project = project
      project.plugins.apply(ArtifactoryPlugin::class.java)

      println("Registering task before publish");
      project.tasks.named("artifactoryPublish") {
        it.doFirst {
          val artifactoryCredentials: ArtifactoryCredentials
          println("... Checking extension")
          if (extension.getUsername().isPresent && extension.getPassword().isPresent) {
            println("... getting creds from ext")
            val username = extension.getUsername().get()
            val password = extension.getPassword().get()
            @Suppress("UNNECESSARY_NOT_NULL_ASSERTION") // it's necessary, wtf
            artifactoryCredentials = ArtifactoryCredentials(username!!, password!!)
          } else {
            println("... getting creds from prpos")
            artifactoryCredentials = artifactoryCredentialsFromLocalProperties(project)
          }

          val artifactoryExt = project.extensions.findByType(ArtifactoryPluginConvention::class.java)
            ?: throw GradleException("Unexpected: Artifactory plugin didn't apply")
          println("... configuring artifactory with creds $artifactoryCredentials")
          artifactoryExt.apply {
            setContextUrl(extension.getContextUrl().get())
            publish {  publisherConfig ->
              publisherConfig.repository { repository ->
                val prodFn = publishToProd ?: { true }
                if (prodFn()) {
                  repository.setRepoKey(extension.getReleaseRepoKey().get())
                  repository.setUsername(artifactoryCredentials.username)
                  repository.setPassword(artifactoryCredentials.password)
                }
              }
              publisherConfig.defaults { artifactoryTask ->
                // Todo: hopefully this is adequate without creating tons of extra publications
                artifactoryTask.publications("ALL_PUBLICATIONS")
              }
            }
          }
        }
      }



      // TODO: must configure artifactory after all apply()s
      //  or do I? Just try with ALL
      val artifactory = project.plugins.findPlugin(ArtifactoryPlugin::class.java)
        ?: throw GradleException("unexpected: Artifactory plugin didn't apply")
    }
}
